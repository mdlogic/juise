version 1.1;

ns jcs extension = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns xutil extension = "http://xml.libslax.org/xutil";
ns exslt = "http://exslt.org/common";

param $target;
param $command;
param $rpc;
param $form = "true";
param $debug;

output-method html {
    indent no;
}

match / {
    if ($form != "false") {
	<html> {
	    <head> {
		<meta http-equiv="content-type"
		    content="text/html; charset=iso-8859-1">;
		<meta name="author" content="Phil Shafer">;
		<title> {
		    expr "JUNOS Commands";
		    if ($target) {
			expr " @ " _ $target;
		    }
		}

		<script type="text/javascript">;
	
		<style type="text/css" title="currentStyle" media="screen"> {
		    expr '@import url("/css/clira.css");';
		}
	    }
	    <body> {
		<title> "JUNOS Commands in HTML";
		<h1> "JUNOS Commands";

		<form action="/core/clira.slax"> {
		    <input spellcheck="false" autocomplete="off"
		    maxlength="2048" name="command" size="60" type="text"
		    value=$command>;

		    <label> "@";
		    <input spellcheck="false" autocomplete="off"
		    maxlength="256" name="target" size="16" type="text"
		    value=$target>;
		    <input type="submit" value="OK">;
		}

		if ($target && $command) {
		    call make-content;
		}
	    }
	}
    } else {
	if ($target && $rpc) {
	    call make-rpc;
	}
	if ($target && $command) {
	    call make-content;
	}
    }
}

template make-content {
    var $conn = jcs:open($target);
    if ($conn) {
	var $rpc = <command format="html"> $command;
        var $res = jcs:execute($conn, $rpc);
	copy-of $res;
    } else {
	terminate "connection failure";
    }
}

template make-rpc {
    <div class="rpc-output"> {
	var $xml = xutil:string-to-xml($rpc);
	var $name = name($xml);
	if ($debug) {
	    <div> { expr "Target: " _ $target; }
	    <div> { expr "RPC: " _ $rpc; }
	    <div> { expr "Name: " _ $name; }
	    <div> { expr "type: " _ exslt:object-type($xml); }
	    <div> {
		expr "RPC-as-XML: ";
		copy-of $xml;
	    }
	}

	var $conn = jcs:open($target);
	if ($conn) {
	    var $res = jcs:execute($conn, $xml);
	    <div class=$name _ "-response"> {
		copy-of $res;
	    }
	} else {
	    terminate "connection failure";
	}
    }
}

match * {
    mode "div";

    <div class=name()> {
	apply-templates {
	    mode "div";
	}
    }
}
